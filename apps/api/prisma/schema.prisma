generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String    @id @default(dbgenerated("auth.uid()")) @db.Uuid
  email     String    @unique
  name      String?
  role      UserRole  @default(USER)
  avatarUrl String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]
  projects  Project[]
}

model StoryTemplate {
  id            String    @id @default(cuid())
  title         String
  description   String?
  coverImageUrl String
  layoutJson    Json
  previewPages  Int       @default(2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
}

model Project {
  id             String          @id @default(cuid())
  userId         String          @db.Uuid
  templateId     String
  title          String?
  status         ProjectStatus   @default(DRAFT)
  generatedPages Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         Order[]
  template       StoryTemplate   @relation(fields: [templateId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedImages UploadedImage[]
}

model UploadedImage {
  id        String   @id @default(cuid())
  projectId String
  imageUrl  String
  cropData  Json?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String      @db.Uuid
  projectId   String
  stripeId    String      @unique
  amount      Int
  currency    String      @default("USD")
  status      OrderStatus @default(PENDING)
  trackingUrl String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  project     Project     @relation(fields: [projectId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  message   String
  avatarUrl String?
  createdAt DateTime @default(now())
}

model BlogPost {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  content    String
  coverImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  COMPLETED
  PURCHASED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
