generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email            String         @unique
  name             String?
  role             UserRole       @default(USER)
  avatarUrl        String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  id               String         @id @default(dbgenerated("auth.uid()")) @db.Uuid
  stripeCustomerId String?
  orders           Order[]
  projects         Project[]
  subscriptions    Subscription[]
}

model Subscription {
  id               String    @id @default(cuid())
  userId           String    @db.Uuid
  stripeId         String?   @unique
  status           SubStatus @default(ACTIVE)
  startedAt        DateTime  @default(now())
  currentPeriodEnd DateTime
  digitalBooksUsed Int       @default(0)
  digitalBookQuota Int       @default(10)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model StoryTemplate {
  id            String    @id @default(cuid())
  title         String
  description   String?
  coverImageUrl String
  layoutJson    Json
  previewPages  Int       @default(2)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]

  @@index([title])
  @@index([id])
}

model Project {
  id             String          @id @default(cuid())
  templateId     String
  title          String?
  status         ProjectStatus   @default(DRAFT)
  generatedPages Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userId         String          @db.Uuid
  orders         Order[]
  template       StoryTemplate   @relation(fields: [templateId], references: [id])
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedImages UploadedImage[]

  @@index([userId])
  @@index([id])
  @@index([status])
}

model UploadedImage {
  id        String   @id @default(cuid())
  projectId String
  imageUrl  String
  cropData  Json?
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Order {
  id          String        @id @default(cuid())
  projectId   String
  stripeId    String?       @unique
  amount      Int
  currency    String        @default("USD")
  status      OrderStatus   @default(PENDING)
  trackingUrl String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  coverType   CoverType?
  pages       Int?
  productType ProductType
  shipping    ShippingType?
  userId      String        @db.Uuid
  project     Project       @relation(fields: [projectId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id        String   @id @default(cuid())
  name      String
  message   String
  avatarUrl String?
  createdAt DateTime @default(now())
}

model BlogPost {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  content    String
  coverImage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([title])
}

enum UserRole {
  USER
  ADMIN
}

enum ProjectStatus {
  DRAFT
  COMPLETED
  PURCHASED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProductType {
  DIGITAL_BOOK
  PHYSICAL_BOOK
  SUBSCRIPTION
}

enum CoverType {
  SOFTCOVER
  HARDCOVER
}

enum ShippingType {
  STANDARD
  EXPRESS
}

enum SubStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  EXPIRED
}
